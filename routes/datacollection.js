const express = require('express');
const router = express.Router();
var mysql = require('mysql');
var cookieParser = require('cookie-parser');
const { PythonShell } = require('python-shell');
const { exec } = require('child_process');
var cookieParser = require('cookie-parser');
router.use(cookieParser());
var moonNames = { 'Sinus Aestuum': [12.1, -8.34], 'Copernicus': [9.62, -20.08], 'Sinus Honoris': [11.72, 17.87], 'Rima Cauchy': [10.42, 38.07], 'Fra Mauro': [-6.06, -16.97], 'Mons Penck': [-10.0, 21.74], 'Lacus Bonitatis': [23.18, 44.32], 'Montes Archimedes': [25.39, -5.25], 'Palus Putredinis': [27.36, 0.0], 'Montes Taurus': [27.32, 40.34], 'Palus Somni': [13.69, 44.72], 'Mare Vaporum': [13.2, 4.09], 'Sinus Concordiae': [10.98, 42.47], 'Rimae Hypatia': [-0.34, 22.78], 'Dorsa Lister': [19.76, 23.52], 'Dorsum Buckland': [19.43, 14.3], 'Dorsum Azara': [26.86, 19.17], 'Vallis Capella': [-7.39, 35.04], 'Mare Cognitum': [-10.53, -22.31], 'Rima Ariadaeus': [6.48, 13.44], 'Rima Hyginus': [7.62, 6.77], 'Montes Haemus': [17.11, 12.03], 'Sinus Medii': [1.63, 1.03] };
var moonNames2 = []
for (let i in moonNames)
  moonNames2.push(i);
var plutoNames = { 'Lowell Regio': [86.0, 338.0], 'Venera Terra': [56.89, 117.62], 'Viking Terra': [12.34, 150.97], 'Voyager Terra': [60.08, 153.32], 'Tatarus Dorsa': [8.5, 233.09], 'Pioneer Terra': [56.58, 192.4], 'Hayabusa Terra': [46.07, 229.88], 'Cthulhu Macula': [0.0, 90.0], 'Tombaugh Regio': [7.62, 183.22], 'Zheng He Montes': [86.0, 338.0], 'Al Idrisi Montes': [33.99, 156.01], 'Elliot Crater': [12.04, 138.86], 'Columbia Colles': [28.53, 196.36], 'Challenger Colles': [23.05, 195.1], 'Baret Montes': [14.6, 157.8], 'Hillary Montes': [3.26, 169.58], 'Norgay Montes': [-15.62, 177.38], 'Sputnik Planum': [20.0, 180.0] }
var plutoNames2 = []
for (let i in plutoNames)
  plutoNames2.push(i);
var marsNames = { 'Arabia Terra': [21.25, 5.72], 'Sciaparelli Crater': [-2.71, 16.77], 'Terra Meridiani': [-7.12, 4.0], 'Margaritifer Terra': [-1.5, 335.08], 'Hellas Basin': [-42.43, 70.5], 'Hyugens Crater': [-13.88, 55.58], 'Syrtis Major': [9.2, 67.1], 'Northern Polar Region': [87.32, 54.96], 'Southern Polar Cap': [-83.35, 157.7], 'Olympus Mons': [18.65, 226.2], 'Amazonis Planitia': [25.75, 197.09], 'Terra Sirenum': [-39.49, 205.85], 'Solis Lacus': [-26.4, 270.33], 'Valles Marineris': [-14.01, 301.41], 'Tharsis Montes': [1.57, 247.42], 'Northern Polar Region': [87.32, 54.96], 'Southern Polar Cap': [-83.35, 157.7] }
var marsNames2 = []
for (let i in marsNames)
  marsNames2.push(i);
var mercuryNames = { 'Budh Planitia': [19.52, 150.46], 'Borealis Planitia': [67.3, 327.4], 'Sobkou Planitia': [39.0, 128.02], 'Fram Rupes': [-57.68, 93.2], 'Caloris Basin': [31.65, 198.02], 'Wagner': [-68.25, 114.78], 'Sophocles': [-6.95, 146.04], 'Valmiki': [-23.58, 141.41], 'Schubert': [-43.21, 54.26], 'Vyasa': [49.79, 84.62] };
var mercuryNames2 = []
for (let i in mercuryNames)
  mercuryNames2.push(i);
var moonCoords = '[[12.1, -8.34], [9.62, -20.08], [11.72, 17.87], [10.42, 38.07], [-6.06, -16.97], [-10.0, 21.74], [23.18, 44.32], [25.39, -5.25], [27.36, 0.0], [27.32, 40.34], [13.69, 44.72], [13.2, 4.09], [10.98, 42.47], [-0.34, 22.78], [19.76, 23.52], [19.43, 14.3], [26.86, 19.17], [-7.39, 35.04], [-10.53, -22.31], [6.48, 13.44], [7.62, 6.77], [17.11, 12.03], [1.63, 1.03]]';
var moonCoords2 = [[12.1, -8.34], [9.62, -20.08], [11.72, 17.87], [10.42, 38.07], [-6.06, -16.97], [-10.0, 21.74], [23.18, 44.32], [25.39, -5.25], [27.36, 0.0], [27.32, 40.34], [13.69, 44.72], [13.2, 4.09], [10.98, 42.47], [-0.34, 22.78], [19.76, 23.52], [19.43, 14.3], [26.86, 19.17], [-7.39, 35.04], [-10.53, -22.31], [6.48, 13.44], [7.62, 6.77], [17.11, 12.03], [1.63, 1.03]];
var moonPaths = [[[12.1, -8.34], [9.62, -20.08]], [[9.62, -20.08], [12.1, -8.34]], [[12.1, -8.34], [-6.06, -16.97]], [[-6.06, -16.97], [12.1, -8.34]], [[12.1, -8.34], [25.39, -5.25]], [[25.39, -5.25], [12.1, -8.34]], [[12.1, -8.34], [1.63, 1.03]], [[1.63, 1.03], [12.1, -8.34]], [[12.1, -8.34], [7.62, 6.77]], [[7.62, 6.77], [12.1, -8.34]], [[12.1, -8.34], [27.36, 0.0]], [[27.36, 0.0], [12.1, -8.34]], [[9.62, -20.08], [-6.06, -16.97]], [[-6.06, -16.97], [9.62, -20.08]], [[9.62, -20.08], [-10.53, -22.31]], [[-10.53, -22.31], [9.62, -20.08]], [[9.62, -20.08], [25.39, -5.25]], [[25.39, -5.25], [9.62, -20.08]], [[9.62, -20.08], [27.36, 0.0]], [[27.36, 0.0], [9.62, -20.08]], [[9.62, -20.08], [11.72, 17.87]], [[11.72, 17.87], [9.62, -20.08]], [[9.62, -20.08], [1.63, 1.03]], [[1.63, 1.03], [9.62, -20.08]], [[10.42, 38.07], [10.98, 42.47]], [[10.98, 42.47], [10.42, 38.07]], [[10.42, 38.07], [13.69, 44.72]], [[13.69, 44.72], [10.42, 38.07]], [[10.42, 38.07], [11.72, 17.87]], [[11.72, 17.87], [10.42, 38.07]], [[10.42, 38.07], [6.48, 13.44]], [[6.48, 13.44], [10.42, 38.07]], [[10.42, 38.07], [-7.39, 35.04]], [[-7.39, 35.04], [10.42, 38.07]], [[10.42, 38.07], [-0.34, 22.78]], [[-0.34, 22.78], [10.42, 38.07]], [[-6.06, -16.97], [-10.53, -22.31]], [[-10.53, -22.31], [-6.06, -16.97]], [[-6.06, -16.97], [25.39, -5.25]], [[25.39, -5.25], [-6.06, -16.97]], [[-10.0, 21.74], [-0.34, 22.78]], [[-0.34, 22.78], [-10.0, 21.74]], [[-10.0, 21.74], [-7.39, 35.04]], [[-7.39, 35.04], [-10.0, 21.74]], [[23.18, 44.32], [27.32, 40.34]], [[27.32, 40.34], [23.18, 44.32]], [[23.18, 44.32], [13.69, 44.72]], [[13.69, 44.72], [23.18, 44.32]], [[27.36, 0.0], [25.39, -5.25]], [[25.39, -5.25], [27.36, 0.0]], [[27.36, 0.0], [19.43, 14.3]], [[19.43, 14.3], [27.36, 0.0]], [[27.36, 0.0], [17.11, 12.03]], [[17.11, 12.03], [27.36, 0.0]], [[27.32, 40.34], [19.76, 23.52]], [[19.76, 23.52], [27.32, 40.34]], [[27.36, 0.0], [26.86, 19.17]], [[26.86, 19.17], [27.36, 0.0]], [[13.69, 44.72], [10.98, 42.47]], [[10.98, 42.47], [13.69, 44.72]], [[13.2, 4.09], [7.62, 6.77]], [[7.62, 6.77], [13.2, 4.09]], [[13.2, 4.09], [6.48, 13.44]], [[6.48, 13.44], [13.2, 4.09]], [[13.2, 4.09], [17.11, 12.03]], [[17.11, 12.03], [13.2, 4.09]], [[13.2, 4.09], [9.62, -20.08]], [[9.62, -20.08], [13.2, 4.09]], [[-0.34, 22.78], [6.48, 13.44]], [[6.48, 13.44], [-0.34, 22.78]], [[-0.34, 22.78], [19.76, 23.52]], [[19.76, 23.52], [-0.34, 22.78]], [[-0.34, 22.78], [-7.39, 35.04]], [[-7.39, 35.04], [-0.34, 22.78]], [[19.76, 23.52], [-7.39, 35.04]], [[-7.39, 35.04], [19.76, 23.52]], [[19.76, 23.52], [19.43, 14.3]], [[19.43, 14.3], [19.76, 23.52]], [[19.76, 23.52], [26.86, 19.17]], [[26.86, 19.17], [19.76, 23.52]], [[19.76, 23.52], [17.11, 12.03]], [[17.11, 12.03], [19.76, 23.52]], [[19.43, 14.3], [17.11, 12.03]], [[17.11, 12.03], [19.43, 14.3]], [[19.43, 14.3], [26.86, 19.17]], [[26.86, 19.17], [19.43, 14.3]], [[-7.39, 35.04], [1.63, 1.03]], [[1.63, 1.03], [-7.39, 35.04]], [[6.48, 13.44], [7.62, 6.77]], [[7.62, 6.77], [6.48, 13.44]], [[6.48, 13.44], [17.11, 12.03]], [[17.11, 12.03], [6.48, 13.44]], [[6.48, 13.44], [1.63, 1.03]], [[1.63, 1.03], [6.48, 13.44]], [[7.62, 6.77], [17.11, 12.03]], [[17.11, 12.03], [7.62, 6.77]], [[7.62, 6.77], [1.63, 1.03]], [[1.63, 1.03], [7.62, 6.77]]];
var moonPaths2 = '[[[12.1, -8.34], [9.62, -20.08]], [[9.62, -20.08], [12.1, -8.34]], [[12.1, -8.34], [-6.06, -16.97]], [[-6.06, -16.97], [12.1, -8.34]], [[12.1, -8.34], [25.39, -5.25]], [[25.39, -5.25], [12.1, -8.34]], [[12.1, -8.34], [1.63, 1.03]], [[1.63, 1.03], [12.1, -8.34]], [[12.1, -8.34], [7.62, 6.77]], [[7.62, 6.77], [12.1, -8.34]], [[12.1, -8.34], [27.36, 0.0]], [[27.36, 0.0], [12.1, -8.34]], [[9.62, -20.08], [-6.06, -16.97]], [[-6.06, -16.97], [9.62, -20.08]], [[9.62, -20.08], [-10.53, -22.31]], [[-10.53, -22.31], [9.62, -20.08]], [[9.62, -20.08], [25.39, -5.25]], [[25.39, -5.25], [9.62, -20.08]], [[9.62, -20.08], [27.36, 0.0]], [[27.36, 0.0], [9.62, -20.08]], [[9.62, -20.08], [11.72, 17.87]], [[11.72, 17.87], [9.62, -20.08]], [[9.62, -20.08], [1.63, 1.03]], [[1.63, 1.03], [9.62, -20.08]], [[10.42, 38.07], [10.98, 42.47]], [[10.98, 42.47], [10.42, 38.07]], [[10.42, 38.07], [13.69, 44.72]], [[13.69, 44.72], [10.42, 38.07]], [[10.42, 38.07], [11.72, 17.87]], [[11.72, 17.87], [10.42, 38.07]], [[10.42, 38.07], [6.48, 13.44]], [[6.48, 13.44], [10.42, 38.07]], [[10.42, 38.07], [-7.39, 35.04]], [[-7.39, 35.04], [10.42, 38.07]], [[10.42, 38.07], [-0.34, 22.78]], [[-0.34, 22.78], [10.42, 38.07]], [[-6.06, -16.97], [-10.53, -22.31]], [[-10.53, -22.31], [-6.06, -16.97]], [[-6.06, -16.97], [25.39, -5.25]], [[25.39, -5.25], [-6.06, -16.97]], [[-10.0, 21.74], [-0.34, 22.78]], [[-0.34, 22.78], [-10.0, 21.74]], [[-10.0, 21.74], [-7.39, 35.04]], [[-7.39, 35.04], [-10.0, 21.74]], [[23.18, 44.32], [27.32, 40.34]], [[27.32, 40.34], [23.18, 44.32]], [[23.18, 44.32], [13.69, 44.72]], [[13.69, 44.72], [23.18, 44.32]], [[27.36, 0.0], [25.39, -5.25]], [[25.39, -5.25], [27.36, 0.0]], [[27.36, 0.0], [19.43, 14.3]], [[19.43, 14.3], [27.36, 0.0]], [[27.36, 0.0], [17.11, 12.03]], [[17.11, 12.03], [27.36, 0.0]], [[27.32, 40.34], [19.76, 23.52]], [[19.76, 23.52], [27.32, 40.34]], [[27.36, 0.0], [26.86, 19.17]], [[26.86, 19.17], [27.36, 0.0]], [[13.69, 44.72], [10.98, 42.47]], [[10.98, 42.47], [13.69, 44.72]], [[13.2, 4.09], [7.62, 6.77]], [[7.62, 6.77], [13.2, 4.09]], [[13.2, 4.09], [6.48, 13.44]], [[6.48, 13.44], [13.2, 4.09]], [[13.2, 4.09], [17.11, 12.03]], [[17.11, 12.03], [13.2, 4.09]], [[13.2, 4.09], [9.62, -20.08]], [[9.62, -20.08], [13.2, 4.09]], [[-0.34, 22.78], [6.48, 13.44]], [[6.48, 13.44], [-0.34, 22.78]], [[-0.34, 22.78], [19.76, 23.52]], [[19.76, 23.52], [-0.34, 22.78]], [[-0.34, 22.78], [-7.39, 35.04]], [[-7.39, 35.04], [-0.34, 22.78]], [[19.76, 23.52], [-7.39, 35.04]], [[-7.39, 35.04], [19.76, 23.52]], [[19.76, 23.52], [19.43, 14.3]], [[19.43, 14.3], [19.76, 23.52]], [[19.76, 23.52], [26.86, 19.17]], [[26.86, 19.17], [19.76, 23.52]], [[19.76, 23.52], [17.11, 12.03]], [[17.11, 12.03], [19.76, 23.52]], [[19.43, 14.3], [17.11, 12.03]], [[17.11, 12.03], [19.43, 14.3]], [[19.43, 14.3], [26.86, 19.17]], [[26.86, 19.17], [19.43, 14.3]], [[-7.39, 35.04], [1.63, 1.03]], [[1.63, 1.03], [-7.39, 35.04]], [[6.48, 13.44], [7.62, 6.77]], [[7.62, 6.77], [6.48, 13.44]], [[6.48, 13.44], [17.11, 12.03]], [[17.11, 12.03], [6.48, 13.44]], [[6.48, 13.44], [1.63, 1.03]], [[1.63, 1.03], [6.48, 13.44]], [[7.62, 6.77], [17.11, 12.03]], [[17.11, 12.03], [7.62, 6.77]], [[7.62, 6.77], [1.63, 1.03]], [[1.63, 1.03], [7.62, 6.77]]]';
var marsCoords = '[[21.25, 5.72], [-2.71, 16.77], [-7.12, 4], [-1.5, 335.08], [-42.43, 70.5], [-13.88, 55.58], [9.2, 67.1], [87.32, 54.96], [-83.35, 157.7], [18.650, 226.200], [25.75, 197.09], [-39.49, 205.85], [-26.4, 270.33], [-14.01, 301.41], [1.57, 247.42], [87.32, 54.96], [-83.35, 157.7]]';
var marsCoords2 = [[21.25, 5.72], [-2.71, 16.77], [-7.12, 4], [-1.5, 335.08], [-42.43, 70.5], [-13.88, 55.58], [9.2, 67.1], [87.32, 54.96], [-83.35, 157.7], [18.650, 226.200], [25.75, 197.09], [-39.49, 205.85], [-26.4, 270.33], [-14.01, 301.41], [1.57, 247.42], [87.32, 54.96], [-83.35, 157.7]];
var marsPaths = [[[[21.25, 5.72], [87.32, 54.96]], [[87.32, 54.96], [21.25, 5.72]], [[21.25, 5.72], [-2.71, 16.77]], [[-2.71, 16.77], [21.25, 5.72]], [[-2.71, 16.77], [87.32, 54.96]], [[87.32, 54.96], [-2.71, 16.77]], [[-2.71, 16.77], [-7.12, 4.0]], [[-7.12, 4.0], [-2.71, 16.77]], [[-7.12, 4.0], [-83.35, 157.7]], [[-83.35, 157.7], [-7.12, 4.0]], [[-7.12, 4.0], [-1.5, 335.08]], [[-1.5, 335.08], [-7.12, 4.0]], [[-7.12, 4.0], [-42.43, 70.5]], [[-42.43, 70.5], [-7.12, 4.0]], [[-1.5, 335.08], [-42.43, 70.5]], [[-42.43, 70.5], [-1.5, 335.08]], [[-1.5, 335.08], [-83.35, 157.7]], [[-83.35, 157.7], [-1.5, 335.08]], [[-1.5, 335.08], [-13.88, 55.58]], [[-13.88, 55.58], [-1.5, 335.08]], [[-42.43, 70.5], [-83.35, 157.7]], [[-83.35, 157.7], [-42.43, 70.5]], [[-42.43, 70.5], [-13.88, 55.58]], [[-13.88, 55.58], [-42.43, 70.5]], [[-13.88, 55.58], [-83.35, 157.7]], [[-83.35, 157.7], [-13.88, 55.58]], [[-13.88, 55.58], [9.2, 67.1]], [[9.2, 67.1], [-13.88, 55.58]], [[9.2, 67.1], [87.32, 54.96]], [[87.32, 54.96], [9.2, 67.1]]], [[[18.65, 226.2], [87.32, 54.96]], [[87.32, 54.96], [18.65, 226.2]], [[18.65, 226.2], [25.75, 197.09]], [[25.75, 197.09], [18.65, 226.2]], [[18.65, 226.2], [1.57, 247.42]], [[1.57, 247.42], [18.65, 226.2]], [[25.75, 197.09], [1.57, 247.42]], [[1.57, 247.42], [25.75, 197.09]], [[25.75, 197.09], [-14.01, 301.41]], [[-14.01, 301.41], [25.75, 197.09]], [[-39.49, 205.85], [-14.01, 301.41]], [[-14.01, 301.41], [-39.49, 205.85]], [[-39.49, 205.85], [-26.4, 270.33]], [[-26.4, 270.33], [-39.49, 205.85]], [[-39.49, 205.85], [-83.35, 157.7]], [[-83.35, 157.7], [-39.49, 205.85]], [[-14.01, 301.41], [1.57, 247.42]], [[1.57, 247.42], [-14.01, 301.41]], [[-14.01, 301.41], [-26.4, 270.33]], [[-26.4, 270.33], [-14.01, 301.41]], [[1.57, 247.42], [-83.35, 157.7]], [[-83.35, 157.7], [1.57, 247.42]], [[87.32, 54.96], [1.57, 247.42]], [[1.57, 247.42], [87.32, 54.96]]]];
var marsPaths2 = '[[[[21.25, 5.72], [87.32, 54.96]], [[87.32, 54.96], [21.25, 5.72]], [[21.25, 5.72], [-2.71, 16.77]], [[-2.71, 16.77], [21.25, 5.72]], [[-2.71, 16.77], [87.32, 54.96]], [[87.32, 54.96], [-2.71, 16.77]], [[-2.71, 16.77], [-7.12, 4.0]], [[-7.12, 4.0], [-2.71, 16.77]], [[-7.12, 4.0], [-83.35, 157.7]], [[-83.35, 157.7], [-7.12, 4.0]], [[-7.12, 4.0], [-1.5, 335.08]], [[-1.5, 335.08], [-7.12, 4.0]], [[-7.12, 4.0], [-42.43, 70.5]], [[-42.43, 70.5], [-7.12, 4.0]], [[-1.5, 335.08], [-42.43, 70.5]], [[-42.43, 70.5], [-1.5, 335.08]], [[-1.5, 335.08], [-83.35, 157.7]], [[-83.35, 157.7], [-1.5, 335.08]], [[-1.5, 335.08], [-13.88, 55.58]], [[-13.88, 55.58], [-1.5, 335.08]], [[-42.43, 70.5], [-83.35, 157.7]], [[-83.35, 157.7], [-42.43, 70.5]], [[-42.43, 70.5], [-13.88, 55.58]], [[-13.88, 55.58], [-42.43, 70.5]], [[-13.88, 55.58], [-83.35, 157.7]], [[-83.35, 157.7], [-13.88, 55.58]], [[-13.88, 55.58], [9.2, 67.1]], [[9.2, 67.1], [-13.88, 55.58]], [[9.2, 67.1], [87.32, 54.96]], [[87.32, 54.96], [9.2, 67.1]]], [[[18.65, 226.2], [87.32, 54.96]], [[87.32, 54.96], [18.65, 226.2]], [[18.65, 226.2], [25.75, 197.09]], [[25.75, 197.09], [18.65, 226.2]], [[18.65, 226.2], [1.57, 247.42]], [[1.57, 247.42], [18.65, 226.2]], [[25.75, 197.09], [1.57, 247.42]], [[1.57, 247.42], [25.75, 197.09]], [[25.75, 197.09], [-14.01, 301.41]], [[-14.01, 301.41], [25.75, 197.09]], [[-39.49, 205.85], [-14.01, 301.41]], [[-14.01, 301.41], [-39.49, 205.85]], [[-39.49, 205.85], [-26.4, 270.33]], [[-26.4, 270.33], [-39.49, 205.85]], [[-39.49, 205.85], [-83.35, 157.7]], [[-83.35, 157.7], [-39.49, 205.85]], [[-14.01, 301.41], [1.57, 247.42]], [[1.57, 247.42], [-14.01, 301.41]], [[-14.01, 301.41], [-26.4, 270.33]], [[-26.4, 270.33], [-14.01, 301.41]], [[1.57, 247.42], [-83.35, 157.7]], [[-83.35, 157.7], [1.57, 247.42]], [[87.32, 54.96], [1.57, 247.42]], [[1.57, 247.42], [87.32, 54.96]]]]';
var mercuryCoords = '[[19.52, 150.46], [67.3, 327.4], [39, 128.02], [-57.68, 93.2], [31.65, 198.02], [-68.25, 114.78], [-6.95, 146.04], [-23.58, 141.41], [-43.21, 54.26], [49.79, 84.62]]';
var mercuryCoords2 = [[19.52, 150.46], [67.3, 327.4], [39, 128.02], [-57.68, 93.2], [31.65, 198.02], [-68.25, 114.78], [-6.95, 146.04], [-23.58, 141.41], [-43.21, 54.26], [49.79, 84.62]];
var mercuryPaths = [[[19.52, 150.46], [39.0, 128.02]], [[39.0, 128.02], [19.52, 150.46]], [[19.52, 150.46], [-57.68, 93.2]], [[-57.68, 93.2], [19.52, 150.46]], [[19.52, 150.46], [31.65, 198.02]], [[31.65, 198.02], [19.52, 150.46]], [[19.52, 150.46], [-6.95, 146.04]], [[-6.95, 146.04], [19.52, 150.46]], [[19.52, 150.46], [-43.21, 54.26]], [[-43.21, 54.26], [19.52, 150.46]], [[67.3, 327.4], [39.0, 128.02]], [[39.0, 128.02], [67.3, 327.4]], [[67.3, 327.4], [-57.68, 93.2]], [[-57.68, 93.2], [67.3, 327.4]], [[67.3, 327.4], [31.65, 198.02]], [[31.65, 198.02], [67.3, 327.4]], [[67.3, 327.4], [-68.25, 114.78]], [[-68.25, 114.78], [67.3, 327.4]], [[67.3, 327.4], [-43.21, 54.26]], [[-43.21, 54.26], [67.3, 327.4]], [[67.3, 327.4], [49.79, 84.62]], [[49.79, 84.62], [67.3, 327.4]], [[39.0, 128.02], [-57.68, 93.2]], [[-57.68, 93.2], [39.0, 128.02]], [[39.0, 128.02], [31.65, 198.02]], [[31.65, 198.02], [39.0, 128.02]], [[39.0, 128.02], [-68.25, 114.78]], [[-68.25, 114.78], [39.0, 128.02]], [[39.0, 128.02], [-23.58, 141.41]], [[-23.58, 141.41], [39.0, 128.02]], [[39.0, 128.02], [49.79, 84.62]], [[49.79, 84.62], [39.0, 128.02]], [[39.0, 128.02], [-43.21, 54.26]], [[-43.21, 54.26], [39.0, 128.02]], [[19.52, 150.46], [-23.58, 141.41]], [[-23.58, 141.41], [19.52, 150.46]], [[-57.68, 93.2], [-68.25, 114.78]], [[-68.25, 114.78], [-57.68, 93.2]], [[-57.68, 93.2], [-43.21, 54.26]], [[-43.21, 54.26], [-57.68, 93.2]], [[-57.68, 93.2], [49.79, 84.62]], [[49.79, 84.62], [-57.68, 93.2]], [[31.65, 198.02], [-6.95, 146.04]], [[-6.95, 146.04], [31.65, 198.02]], [[-68.25, 114.78], [49.79, 84.62]], [[49.79, 84.62], [-68.25, 114.78]], [[-6.95, 146.04], [-43.21, 54.26]], [[-43.21, 54.26], [-6.95, 146.04]], [[-6.95, 146.04], [-23.58, 141.41]], [[-23.58, 141.41], [-6.95, 146.04]], [[-6.95, 146.04], [-57.68, 93.2]], [[-57.68, 93.2], [-6.95, 146.04]], [[-23.58, 141.41], [49.79, 84.62]], [[49.79, 84.62], [-23.58, 141.41]], [[49.79, 84.62], [-43.21, 54.26]], [[-43.21, 54.26], [49.79, 84.62]]];
var mercuryPaths2 = '[[[19.52, 150.46], [39.0, 128.02]], [[39.0, 128.02], [19.52, 150.46]], [[19.52, 150.46], [-57.68, 93.2]], [[-57.68, 93.2], [19.52, 150.46]], [[19.52, 150.46], [31.65, 198.02]], [[31.65, 198.02], [19.52, 150.46]], [[19.52, 150.46], [-6.95, 146.04]], [[-6.95, 146.04], [19.52, 150.46]], [[19.52, 150.46], [-43.21, 54.26]], [[-43.21, 54.26], [19.52, 150.46]], [[67.3, 327.4], [39.0, 128.02]], [[39.0, 128.02], [67.3, 327.4]], [[67.3, 327.4], [-57.68, 93.2]], [[-57.68, 93.2], [67.3, 327.4]], [[67.3, 327.4], [31.65, 198.02]], [[31.65, 198.02], [67.3, 327.4]], [[67.3, 327.4], [-68.25, 114.78]], [[-68.25, 114.78], [67.3, 327.4]], [[67.3, 327.4], [-43.21, 54.26]], [[-43.21, 54.26], [67.3, 327.4]], [[67.3, 327.4], [49.79, 84.62]], [[49.79, 84.62], [67.3, 327.4]], [[39.0, 128.02], [-57.68, 93.2]], [[-57.68, 93.2], [39.0, 128.02]], [[39.0, 128.02], [31.65, 198.02]], [[31.65, 198.02], [39.0, 128.02]], [[39.0, 128.02], [-68.25, 114.78]], [[-68.25, 114.78], [39.0, 128.02]], [[39.0, 128.02], [-23.58, 141.41]], [[-23.58, 141.41], [39.0, 128.02]], [[39.0, 128.02], [49.79, 84.62]], [[49.79, 84.62], [39.0, 128.02]], [[39.0, 128.02], [-43.21, 54.26]], [[-43.21, 54.26], [39.0, 128.02]], [[19.52, 150.46], [-23.58, 141.41]], [[-23.58, 141.41], [19.52, 150.46]], [[-57.68, 93.2], [-68.25, 114.78]], [[-68.25, 114.78], [-57.68, 93.2]], [[-57.68, 93.2], [-43.21, 54.26]], [[-43.21, 54.26], [-57.68, 93.2]], [[-57.68, 93.2], [49.79, 84.62]], [[49.79, 84.62], [-57.68, 93.2]], [[31.65, 198.02], [-6.95, 146.04]], [[-6.95, 146.04], [31.65, 198.02]], [[-68.25, 114.78], [49.79, 84.62]], [[49.79, 84.62], [-68.25, 114.78]], [[-6.95, 146.04], [-43.21, 54.26]], [[-43.21, 54.26], [-6.95, 146.04]], [[-6.95, 146.04], [-23.58, 141.41]], [[-23.58, 141.41], [-6.95, 146.04]], [[-6.95, 146.04], [-57.68, 93.2]], [[-57.68, 93.2], [-6.95, 146.04]], [[-23.58, 141.41], [49.79, 84.62]], [[49.79, 84.62], [-23.58, 141.41]], [[49.79, 84.62], [-43.21, 54.26]], [[-43.21, 54.26], [49.79, 84.62]]]';
var plutoCoords = '[[86, 338], [56.89, 117.62], [12.34, 150.97], [60.08, 153.32], [8.5, 233.09], [56.58, 192.4], [46.07, 229.88], [0, 90], [7.62, 183.22], [86, 338], [33.99, 156.01], [12.04, 138.86], [28.53, 196.36], [23.05, 195.1], [14.6, 157.8], [3.26, 169.58], [-15.62, 177.38], [20, 180]]';
var plutoCoords2 = [[86, 338], [56.89, 117.62], [12.34, 150.97], [60.08, 153.32], [8.5, 233.09], [56.58, 192.4], [46.07, 229.88], [0, 90], [7.62, 183.22], [86, 338], [33.99, 156.01], [12.04, 138.86], [28.53, 196.36], [23.05, 195.1], [14.6, 157.8], [3.26, 169.58], [-15.62, 177.38], [20, 180]];
var plutoPaths = [[[[86.0, 338.0], [56.89, 117.62]], [[56.89, 117.62], [86.0, 338.0]], [[56.89, 117.62], [12.34, 150.97]], [[12.34, 150.97], [56.89, 117.62]], [[12.34, 150.97], [60.08, 153.32]], [[60.08, 153.32], [12.34, 150.97]], [[12.34, 150.97], [0.0, 90.0]], [[0.0, 90.0], [12.34, 150.97]], [[60.08, 153.32], [56.58, 192.4]], [[56.58, 192.4], [60.08, 153.32]], [[60.08, 153.32], [7.62, 183.22]], [[7.62, 183.22], [60.08, 153.32]], [[60.08, 153.32], [46.07, 229.88]], [[46.07, 229.88], [60.08, 153.32]], [[8.5, 233.09], [56.58, 192.4]], [[56.58, 192.4], [8.5, 233.09]], [[8.5, 233.09], [46.07, 229.88]], [[46.07, 229.88], [8.5, 233.09]], [[8.5, 233.09], [7.62, 183.22]], [[7.62, 183.22], [8.5, 233.09]], [[56.58, 192.4], [7.62, 183.22]], [[7.62, 183.22], [56.58, 192.4]], [[56.58, 192.4], [46.07, 229.88]], [[46.07, 229.88], [56.58, 192.4]], [[46.07, 229.88], [7.62, 183.22]], [[7.62, 183.22], [46.07, 229.88]]], [[[86.0, 338.0], [33.99, 156.01]], [[33.99, 156.01], [86.0, 338.0]], [[86.0, 338.0], [20.0, 180.0]], [[20.0, 180.0], [86.0, 338.0]], [[86.0, 338.0], [28.53, 196.36]], [[28.53, 196.36], [86.0, 338.0]], [[86.0, 338.0], [23.05, 195.1]], [[23.05, 195.1], [86.0, 338.0]], [[86.0, 338.0], [3.26, 169.58]], [[3.26, 169.58], [86.0, 338.0]], [[33.99, 156.01], [20.0, 180.0]], [[20.0, 180.0], [33.99, 156.01]], [[33.99, 156.01], [28.53, 196.36]], [[28.53, 196.36], [33.99, 156.01]], [[33.99, 156.01], [23.05, 195.1]], [[23.05, 195.1], [33.99, 156.01]], [[12.04, 138.86], [14.6, 157.8]], [[14.6, 157.8], [12.04, 138.86]], [[12.04, 138.86], [3.26, 169.58]], [[3.26, 169.58], [12.04, 138.86]], [[28.53, 196.36], [23.05, 195.1]], [[23.05, 195.1], [28.53, 196.36]], [[28.53, 196.36], [14.6, 157.8]], [[14.6, 157.8], [28.53, 196.36]], [[28.53, 196.36], [20.0, 180.0]], [[20.0, 180.0], [28.53, 196.36]], [[23.05, 195.1], [20.0, 180.0]], [[20.0, 180.0], [23.05, 195.1]], [[23.05, 195.1], [3.26, 169.58]], [[3.26, 169.58], [23.05, 195.1]], [[23.05, 195.1], [-15.62, 177.38]], [[-15.62, 177.38], [23.05, 195.1]], [[14.6, 157.8], [20.0, 180.0]], [[20.0, 180.0], [14.6, 157.8]], [[14.6, 157.8], [3.26, 169.58]], [[3.26, 169.58], [14.6, 157.8]], [[3.26, 169.58], [20.0, 180.0]], [[20.0, 180.0], [3.26, 169.58]], [[3.26, 169.58], [-15.62, 177.38]], [[-15.62, 177.38], [3.26, 169.58]], [[-15.62, 177.38], [20.0, 180.0]], [[20.0, 180.0], [-15.62, 177.38]]]];
var plutoPaths2 = '[[[[86.0, 338.0], [56.89, 117.62]], [[56.89, 117.62], [86.0, 338.0]], [[56.89, 117.62], [12.34, 150.97]], [[12.34, 150.97], [56.89, 117.62]], [[12.34, 150.97], [60.08, 153.32]], [[60.08, 153.32], [12.34, 150.97]], [[12.34, 150.97], [0.0, 90.0]], [[0.0, 90.0], [12.34, 150.97]], [[60.08, 153.32], [56.58, 192.4]], [[56.58, 192.4], [60.08, 153.32]], [[60.08, 153.32], [7.62, 183.22]], [[7.62, 183.22], [60.08, 153.32]], [[60.08, 153.32], [46.07, 229.88]], [[46.07, 229.88], [60.08, 153.32]], [[8.5, 233.09], [56.58, 192.4]], [[56.58, 192.4], [8.5, 233.09]], [[8.5, 233.09], [46.07, 229.88]], [[46.07, 229.88], [8.5, 233.09]], [[8.5, 233.09], [7.62, 183.22]], [[7.62, 183.22], [8.5, 233.09]], [[56.58, 192.4], [7.62, 183.22]], [[7.62, 183.22], [56.58, 192.4]], [[56.58, 192.4], [46.07, 229.88]], [[46.07, 229.88], [56.58, 192.4]], [[46.07, 229.88], [7.62, 183.22]], [[7.62, 183.22], [46.07, 229.88]]], [[[86.0, 338.0], [33.99, 156.01]], [[33.99, 156.01], [86.0, 338.0]], [[86.0, 338.0], [20.0, 180.0]], [[20.0, 180.0], [86.0, 338.0]], [[86.0, 338.0], [28.53, 196.36]], [[28.53, 196.36], [86.0, 338.0]], [[86.0, 338.0], [23.05, 195.1]], [[23.05, 195.1], [86.0, 338.0]], [[86.0, 338.0], [3.26, 169.58]], [[3.26, 169.58], [86.0, 338.0]], [[33.99, 156.01], [20.0, 180.0]], [[20.0, 180.0], [33.99, 156.01]], [[33.99, 156.01], [28.53, 196.36]], [[28.53, 196.36], [33.99, 156.01]], [[33.99, 156.01], [23.05, 195.1]], [[23.05, 195.1], [33.99, 156.01]], [[12.04, 138.86], [14.6, 157.8]], [[14.6, 157.8], [12.04, 138.86]], [[12.04, 138.86], [3.26, 169.58]], [[3.26, 169.58], [12.04, 138.86]], [[28.53, 196.36], [23.05, 195.1]], [[23.05, 195.1], [28.53, 196.36]], [[28.53, 196.36], [14.6, 157.8]], [[14.6, 157.8], [28.53, 196.36]], [[28.53, 196.36], [20.0, 180.0]], [[20.0, 180.0], [28.53, 196.36]], [[23.05, 195.1], [20.0, 180.0]], [[20.0, 180.0], [23.05, 195.1]], [[23.05, 195.1], [3.26, 169.58]], [[3.26, 169.58], [23.05, 195.1]], [[23.05, 195.1], [-15.62, 177.38]], [[-15.62, 177.38], [23.05, 195.1]], [[14.6, 157.8], [20.0, 180.0]], [[20.0, 180.0], [14.6, 157.8]], [[14.6, 157.8], [3.26, 169.58]], [[3.26, 169.58], [14.6, 157.8]], [[3.26, 169.58], [20.0, 180.0]], [[20.0, 180.0], [3.26, 169.58]], [[3.26, 169.58], [-15.62, 177.38]], [[-15.62, 177.38], [3.26, 169.58]], [[-15.62, 177.38], [20.0, 180.0]], [[20.0, 180.0], [-15.62, 177.38]]]]';


// var connection = mysql.createConnection({
//   host: "zschooldbdev.cyunqe6ljijr.us-east-1.rds.amazonaws.com",
//   database: "Syslab",
//   user: "aravsingh",
//   password: "ZSch#DB2022", 
//   port: "3306",
// });

// connection.connect(function(err) {
//   if (err) {
//     console.error('Database connection failed: ' + err.stack);
//     return;
//   }
//   console.log('Connected to database.');

// });
router.use(cookieParser());
router.post('/addFeature', function(req, res) {
  console.log(req.body.newFeature)
  console.log(req.body.newFeature2)
  console.log(req.body.newFeature3)
  console.log(req.body.planet)
  if ('planet' in req.body) {
    var c = [JSON.parse(req.body.newFeature2), JSON.parse(req.body.newFeature3)]
    console.log(c)
    if (req.body.planet === 'Moon') {
      var a;
      var a2;
      if (!('moonCoord' in req.cookies)) {
        moonCoords2.push(c);
        a2 = JSON.stringify(moonCoords2)
        res.cookie('moonCoord', a2)
      }
      else {
        var a3 = JSON.parse(req.cookies.moonCoord)
        a3.push(c)
        a2 = JSON.stringify(a3);
        res.cookie('moonCoord', a2)
      }
      if (!('moonName' in req.cookies)) {
        moonNames2.push(req.body.newFeature)
        a = moonNames2
        res.cookie('moonName', JSON.stringify(a));
      }
      else {
        var m2 = JSON.parse(req.cookies.moonName)
        m2.push(req.body.newFeature)
        a = m2
        res.cookie('moonName', JSON.stringify(a));
      }
      var c7;
      if (!('moonPath' in req.cookies)) {
        var l = moonPaths.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = moonPaths[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          moonPaths[ind] = temp
        }
        c7 = JSON.stringify(moonPaths);
        res.cookie('moonPath', c7);
      }
      else {
        console.log('cookie')
        var mp = JSON.parse(req.cookies.moonPath)
        var l = mp.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = mp[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          mp[ind] = temp
        }
        c7 = JSON.stringify(mp);
        console.log(c7)
        res.cookie('moonPath', c7)
      }
      var error = {};
      var dataliststrings = ""
      for (let i = 0; i < a.length; i += 1) {
        dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
      }
      var ordD = ""
      var a77 = a.sort()
      for (let i = 0; i < a77.length; i += 1) {
        ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
      }
      error['ord'] = ordD;
      error['data2'] = dataliststrings;
      error['coords'] = a2;
      // error['coords'] = '[[12.1, -8.34], [9.62, -20.08], [11.72, 17.87], [10.42, 38.07], [-6.06, -16.97], [-10.0, 21.74], [23.18, 44.32], [25.39, -5.25], [27.36, 0.0], [27.32, 40.34], [13.69, 44.72], [13.2, 4.09], [10.98, 42.47], [-0.34, 22.78], [19.76, 23.52], [19.43, 14.3], [26.86, 19.17], [-7.39, 35.04], [-10.53, -22.31], [6.48, 13.44], [7.62, 6.77], [17.11, 12.03], [1.63, 1.03]]';
      error['paths'] = c7;
      console.log(error)
      if ('isajax' in req.body)
        res.json(error)
      else
        res.render('moonnavsys', error);
    }
    else if (req.body.planet === 'Mars') {
      var a;
      var a2;
      console.log("what is up")
      if (!('marsCoord' in req.cookies)) {
        marsCoords2.push(c);
        a2 = JSON.stringify(marsCoords2)
        res.cookie('marsCoord', a2)
      }

      else {
        var a3 = JSON.parse(req.cookies.marsCoord)
        a3.push(c)
        a2 = JSON.stringify(a3);
        res.cookie('marsCoord', a2)
      }
      console.log("slice")
      if (!('marsName' in req.cookies)) {
        marsNames2.push(req.body.newFeature)
        a = marsNames2
        res.cookie('marsName', JSON.stringify(a));
      }
      else {
        try {
          var m2 = JSON.parse(req.cookies.moonName)
        }
        catch (error) {
          var m2 = JSON.parse(req.cookies.marsName)
        }
        m2.push(req.body.newFeature)
        a = m2
        res.cookie('marsName', JSON.stringify(a));
      }
      var error = {};
      var dataliststrings = ""
      for (let i = 0; i < a.length; i += 1) {
        dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
      }
      var c7;
      if (!('marsPath' in req.cookies)) {
        var l = marsPaths.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = marsPaths[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          marsPaths[ind] = temp
        }
        c7 = JSON.stringify(marsPaths);
        res.cookie('marsPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.marsPath)
        var l = mp.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = mp[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          mp[ind] = temp
        }
        c7 = JSON.stringify(mp);
        res.cookie('marsPath', c7)
      }
      var ordD = ""
      var a77 = a.sort()
      for (let i = 0; i < a77.length; i += 1) {
        ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
      }
      error['ord'] = ordD;
      error['data2'] = dataliststrings;
      error['coords'] = a2;
      // error['coords'] = '[[21.25, 5.72], [-2.71, 16.77], [-7.12, 4], [-1.5, 335.08], [-42.43, 70.5], [-13.88, 55.58], [9.2, 67.1], [87.32, 54.96], [-83.35, 157.7], [18.650, 226.200], [25.75, 197.09], [-39.49, 205.85], [-26.4, 270.33], [-14.01, 301.41], [1.57, 247.42], [87.32, 54.96], [-83.35, 157.7]]';
      error['paths'] = c7;
      if ('isajax' in req.body)
        res.json(error)
      else
        res.render('marsnavsys', error);
    }
    else if (req.body.planet === 'Pluto') {
      var a;
      var a2;
      if (!('plutoCoord' in req.cookies)) {
        plutoCoords2.push(c);
        a2 = JSON.stringify(plutoCoords2)
        res.cookie('plutoCoord', a2)
      }
      else {
        var a3 = JSON.parse(req.cookies.plutoCoord)
        a3.push(c)
        a2 = JSON.stringify(a3);
        res.cookie('plutoCoord', a2)
      }
      if (!('plutoName' in req.cookies)) {
        plutoNames2.push(req.body.newFeature)
        a = plutoNames2
        res.cookie('plutoName', JSON.stringify(a));
      }
      else {
        console.log(JSON.parse(req.cookies.plutoName))
        try {
          var m2 = JSON.parse(req.cookies.moonName)
        }
        catch (error) {
          var m2 = JSON.parse(req.cookies.plutoName)
        }
        m2.push(req.body.newFeature)
        a = m2
        res.cookie('plutoName', JSON.stringify(a));
      }
      var c7;
      if (!('plutoPath' in req.cookies)) {
        var l = plutoPaths.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = plutoPaths[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          plutoPaths[ind] = temp
        }
        c7 = JSON.stringify(plutoPaths);
        res.cookie('plutoPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.plutoPath)
        var l = mp.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = mp[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          mp[ind] = temp
        }
        c7 = JSON.stringify(mp);
        res.cookie('plutoPath', c7)
      }
      var error = {};
      var dataliststrings = ""
      for (let i = 0; i < a.length; i += 1) {
        dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
      }
      var ordD = ""
      var a77 = a.sort()
      for (let i = 0; i < a77.length; i += 1) {
        ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
      }
      error['ord'] = ordD;
      error['data2'] = dataliststrings;
      error['coords'] = a2;
      // error['coords'] = '[[86, 338], [56.89, 117.62], [12.34, 150.97], [60.08, 153.32], [8.5, 233.09], [56.58, 192.4], [46.07, 229.88], [0, 90], [7.62, 183.22], [86, 338], [33.99, 156.01], [12.04, 138.86], [28.53, 196.36], [23.05, 195.1], [14.6, 157.8], [3.26, 169.58], [-15.62, 177.38], [20, 180]]';
      error['paths'] = c7;
      if ('isajax' in req.body)
        res.json(error)
      else
        res.render('plutonavsys', error);
    }
    else {
      var a;
      var a2;
      if (!('mercuryCoord' in req.cookies)) {
        mercuryCoords2.push(c);
        a2 = JSON.stringify(mercuryCoords2)
        res.cookie('mercuryCoord', a2)
      }
      else {
        var a3 = JSON.parse(req.cookies.mercuryCoord)
        a3.push(c)
        a2 = JSON.stringify(a3);
        res.cookie('mercuryCoord', a2)
      }
      if (!('mercuryName' in req.cookies)) {
        mercuryNames2.push(req.body.newFeature)
        a = mercuryNames2
        res.cookie('mercuryName', JSON.stringify(a));
      }
      else {
        try {
          var m2 = JSON.parse(req.cookies.moonName)
        }
        catch (error) {
          var m2 = JSON.parse(req.cookies.mercuryName)
        }
        //var m2 = JSON.parse(req.cookies.moonName)
        m2.push(req.body.newFeature)
        a = m2
        res.cookie('mercuryName', JSON.stringify(a));
      }
      var c7;
      if (!('mercuryPath' in req.cookies)) {
        var l = mercuryPaths.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = mercuryPaths[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          mercuryPaths[ind] = temp
        }
        c7 = JSON.stringify(mercuryPaths);
        res.cookie('mercuryPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.mercuryPath)
        var l = mp.length;
        var minus = Math.floor(Math.random() * (l - 4)) + 1;
        var r;
        if (l - minus > 0)
          r = Math.floor(Math.random() * (l - minus)) + 1;
        else
          r = Math.floor(Math.random() * l) + 1;
        var visited = []
        var curr = r;
        while (curr > 0) {
          var selec = Math.floor(Math.random() * l)
          while (visited.includes(selec)) {
            selec = Math.floor(Math.random() * l)
          }
          visited.push(selec)
          curr--;
        }
        for (let i = 0; i < visited.length; i++) {
          var ind = visited[i]
          var temp = mp[ind]
          var insInd = Math.floor(Math.random() * (temp.length + 1));
          temp.splice(insInd, 0, c)
          mp[ind] = temp
        }
        c7 = JSON.stringify(mp);
        res.cookie('mercuryPath', c7)
      }
      var error = {};
      var dataliststrings = ""
      for (let i = 0; i < a.length; i += 1) {
        dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
      }
      var ordD = ""
      var a77 = a.sort()
      for (let i = 0; i < a77.length; i += 1) {
        ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
      }
      error['ord'] = ordD;
      error['data2'] = dataliststrings;
      error['coords'] = a2;
      // error['coords'] = '[[19.52, 150.46], [67.3, 327.4], [39, 128.02], [-57.68, 93.2], [31.65, 198.02], [-68.25, 114.78], [-6.95, 146.04], [-23.58, 141.41], [-43.21, 54.26], [49.79, 84.62]]';
      error['paths'] = c7;
      if ('isajax' in req.body)
        res.json(error)
      else
        res.render('mercurynavsys', error);
    }
  }
});
function switchToList(strList) {
  newS = strList.substring(1, strList.length - 1)
  console.log(newS)
  var newS2 = []
  var newS3 = newS.split(",")
  console.log(newS3)
  for (let i = 0; i < newS3.length; i++) {
    newS2.push(newS3[i].substring(1, newS3[i].length - 1))
  }
  const toRet = {}
  for (let i = 0; i < newS2.length; i++) {
    toRet[newS2[i]] = ""
  }
  return toRet;
}
router.post('/avoidFeature', function(req, res) {
  if ('planet' in req.body) {
    if (req.body.planet === 'Moon') {
      // console.log(i)
      // console.log(mc2.length)
      // console.log((JSON.parse(req.cookies.moonCoord).length))
      if ('moonCoord' in req.cookies) {
        var mc2 = JSON.parse(req.cookies.moonName);
        var i = mc2.indexOf(req.body.newFeature);
        var c = [parseFloat(JSON.parse(req.cookies.moonCoord)[i][0]), parseFloat(JSON.parse(req.cookies.moonCoord)[i][1])]
      }
      else {
        var c = moonNames[req.body.newFeature]
      }
      var c2;
      if (!('moonCoord' in req.cookies)) {
        console.log(c)
        moonCoords2.splice(moonCoords2.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(moonCoords2);
        res.cookie('moonCoord', c2)
      }
      else {
        var mc = JSON.parse(req.cookies.moonCoord)
        console.log(c)
        mc.splice(mc.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(mc)
        res.cookie('moonCoord', c2)
      }
      var c7;
      if (!('moonPath' in req.cookies)) {
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < moonPaths.length; i++) {
          for (let x = 0; x < moonPaths[i].length; x++) {
            if (moonPaths[i][x][0] === c[0] && moonPaths[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var moonCoords7 = []
        for (let i = 0; i < moonPaths.length; i++) {
          if (!(iVal.has(i)))
            moonCoords7.push(moonPaths[i])
        }
        moonPaths = moonCoords7
        c7 = JSON.stringify(moonPaths);
        res.cookie('moonPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.moonPath)
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < mp.length; i++) {
          for (let x = 0; x < mp[i].length; x++) {
            if (mp[i][x][0] === c[0] && mp[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var moonCoords7 = []
        for (let i = 0; i < mp.length; i++) {
          if (!(iVal.has(i)))
            moonCoords7.push(mp[i])
        }
        mp = moonCoords7
        c7 = JSON.stringify(mp)
        res.cookie('moonPath', c7)
        console.log(req.cookies.moonPath)
      }
      if (!('moonName' in req.cookies)) {
        moonNames2.splice(moonNames2.indexOf(req.body.newFeature), 1)
        res.cookie('moonName', JSON.stringify(moonNames2));
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < moonNames2.length; i += 1) {
          dataliststrings += "<option value = '" + moonNames2[i] + "'>" + moonNames2[i] + "</option>"
        }
        var ordD = ""
        var a77 = moonNames2.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[12.1, -8.34], [9.62, -20.08], [11.72, 17.87], [10.42, 38.07], [-6.06, -16.97], [-10.0, 21.74], [23.18, 44.32], [25.39, -5.25], [27.36, 0.0], [27.32, 40.34], [13.69, 44.72], [13.2, 4.09], [10.98, 42.47], [-0.34, 22.78], [19.76, 23.52], [19.43, 14.3], [26.86, 19.17], [-7.39, 35.04], [-10.53, -22.31], [6.48, 13.44], [7.62, 6.77], [17.11, 12.03], [1.63, 1.03]]';
        error['paths'] = c7;
        res.render('moonnavsys', error);
      }
      else {
        var a = JSON.parse(req.cookies.moonName)
        a.splice(a.indexOf(req.body.newFeature), 1);
        console.log(a)
        res.cookie('moonName', JSON.stringify(a))
        // req.cookies.moonName = JSON.stringify(a)
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < a.length; i += 1) {
          dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
        }
        var ordD = ""
        var a77 = a.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[12.1, -8.34], [9.62, -20.08], [11.72, 17.87], [10.42, 38.07], [-6.06, -16.97], [-10.0, 21.74], [23.18, 44.32], [25.39, -5.25], [27.36, 0.0], [27.32, 40.34], [13.69, 44.72], [13.2, 4.09], [10.98, 42.47], [-0.34, 22.78], [19.76, 23.52], [19.43, 14.3], [26.86, 19.17], [-7.39, 35.04], [-10.53, -22.31], [6.48, 13.44], [7.62, 6.77], [17.11, 12.03], [1.63, 1.03]]';
        error['paths'] = c7;
        res.render('moonnavsys', error);
      }
    }
    else if (req.body.planet === 'Mars') {
      // console.log(i)
      // console.log(mc2.length)
      // console.log((JSON.parse(req.cookies.moonCoord).length))
      if ('marsCoord' in req.cookies) {
        var mc2 = JSON.parse(req.cookies.marsName);
        var i = mc2.indexOf(req.body.newFeature);
        var c = [parseFloat(JSON.parse(req.cookies.marsCoord)[i][0]), parseFloat(JSON.parse(req.cookies.marsCoord)[i][1])]
      }
      else {
        var c = marsNames[req.body.newFeature]
      }
      var c2;
      if (!('marsCoord' in req.cookies)) {
        console.log("First coord" + marsCoords2.length)
        marsCoords2.splice(marsCoords2.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        console.log("secondCoord" + marsCoords2.length)
        c2 = JSON.stringify(marsCoords2);
        console.log("end", c2)
        res.cookie('marsCoord', c2)
      }
      else {
        var mc = JSON.parse(req.cookies.marsCoord)
        mc.splice(mc.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(mc)
        res.cookie('marsCoord', c2)
      }
      if (!('marsName' in req.cookies)) {
        marsNames2.splice(marsNames2.indexOf(req.body.newFeature), 1)
        res.cookie('marsName', JSON.stringify(marsNames2));
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < marsNames2.length; i += 1) {
          dataliststrings += "<option value = '" + marsNames2[i] + "'>" + marsNames2[i] + "</option>"
        }
        var ordD = ""
        var a77 = marsNames2.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (!('marsPath' in req.cookies)) {
          console.log(c)
          const iVal = new Set()
          for (let i = 0; i < marsPaths.length; i++) {
            for (let x = 0; x < marsPaths[i].length; x++) {
              if (marsPaths[i][x][0] === c[0] && marsPaths[i][x][1] === c[1]) {
                iVal.add(i)
                break;
              }
            }
          }
          var marsCoords7 = []
          for (let i = 0; i < marsPaths.length; i++) {
            if (!(iVal.has(i)))
              marsCoords7.push(marsPaths[i])
          }
          marsPaths = marsCoords7
          c7 = JSON.stringify(marsPaths);
          res.cookie('marsPath', c7)
        }
        else {
          var mp = JSON.parse(req.cookies.marsPath)
          console.log(c)
          const iVal = new Set()
          for (let i = 0; i < mp.length; i++) {
            for (let x = 0; x < mp[i].length; x++) {
              if (mp[i][x][0] === c[0] && mp[i][x][1] === c[1]) {
                iVal.add(i)
                break;
              }
            }
          }
          var marsCoords7 = []
          for (let i = 0; i < mp.length; i++) {
            if (!(iVal.has(i)))
              marsCoords7.push(mp[i])
          }
          mp = marsCoords7
          c7 = JSON.stringify(mp)
          res.cookie('marsPath', c7)
          console.log(req.cookies.marsPath)
        }
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[21.25, 5.72], [-2.71, 16.77], [-7.12, 4], [-1.5, 335.08], [-42.43, 70.5], [-13.88, 55.58], [9.2, 67.1], [87.32, 54.96], [-83.35, 157.7], [18.650, 226.200], [25.75, 197.09], [-39.49, 205.85], [-26.4, 270.33], [-14.01, 301.41], [1.57, 247.42], [87.32, 54.96], [-83.35, 157.7]]';
        error['paths'] = c7;
        res.render('marsnavsys', error);
      }
      else {
        var a = JSON.parse(req.cookies.marsName)
        a.splice(a.indexOf(req.body.newFeature), 1);
        console.log(a)
        res.cookie('marsName', JSON.stringify(a))
        // req.cookies.moonName = JSON.stringify(a)
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < a.length; i += 1) {
          dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
        }
        var ordD = ""
        var a77 = a.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[21.25, 5.72], [-2.71, 16.77], [-7.12, 4], [-1.5, 335.08], [-42.43, 70.5], [-13.88, 55.58], [9.2, 67.1], [87.32, 54.96], [-83.35, 157.7], [18.650, 226.200], [25.75, 197.09], [-39.49, 205.85], [-26.4, 270.33], [-14.01, 301.41], [1.57, 247.42], [87.32, 54.96], [-83.35, 157.7]]';
        error['paths'] = c7;
        res.render('marsnavsys', error);
      }
    }
    else if (req.body.planet === 'Pluto') {
      if ('plutoCoord' in req.cookies) {
        var mc2 = JSON.parse(req.cookies.plutoName);
        var i = mc2.indexOf(req.body.newFeature);
        // console.log(i)
        // console.log(mc2.length)
        // console.log((JSON.parse(req.cookies.moonCoord).length))
        var c = [parseFloat(JSON.parse(req.cookies.plutoCoord)[i][0]), parseFloat(JSON.parse(req.cookies.plutoCoord)[i][1])]
      }
      else {
        var c = plutoNames[req.body.newFeature]
      }
      var c7;
      if (!('plutoPath' in req.cookies)) {
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < plutoPaths.length; i++) {
          for (let x = 0; x < plutoPaths[i].length; x++) {
            if (plutoPaths[i][x][0] === c[0] && plutoPaths[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var plutoCoords7 = []
        for (let i = 0; i < plutoPaths.length; i++) {
          if (!(iVal.has(i)))
            plutoCoords7.push(plutoPaths[i])
        }
        plutoPaths = plutoCoords7
        c7 = JSON.stringify(plutoPaths);
        res.cookie('plutoPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.plutoPath)
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < mp.length; i++) {
          for (let x = 0; x < mp[i].length; x++) {
            if (mp[i][x][0] === c[0] && mp[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var plutoCoords7 = []
        for (let i = 0; i < mp.length; i++) {
          if (!(iVal.has(i)))
            plutoCoords7.push(mp[i])
        }
        mp = plutoCoords7
        c7 = JSON.stringify(mp)
        res.cookie('plutoPath', c7)
        console.log(req.cookies.plutoPath)
      }
      var c2;
      if (!('plutoCoord' in req.cookies)) {
        plutoCoords2.splice(plutoCoords2.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(plutoCoords2);
        res.cookie('plutoCoord', c2)
      }
      else {
        var mc = JSON.parse(req.cookies.plutoCoord)
        mc.splice(mc.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(mc)
        res.cookie('plutoCoord', c2)
      }
      if (!('plutoName' in req.cookies)) {
        plutoNames2.splice(plutoNames2.indexOf(req.body.newFeature), 1)
        res.cookie('plutoName', JSON.stringify(plutoNames2));
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < plutoNames2.length; i += 1) {
          dataliststrings += "<option value = '" + plutoNames2[i] + "'>" + plutoNames2[i] + "</option>"
        }
        var ordD = ""
        var a77 = plutoNames2.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[86, 338], [56.89, 117.62], [12.34, 150.97], [60.08, 153.32], [8.5, 233.09], [56.58, 192.4], [46.07, 229.88], [0, 90], [7.62, 183.22], [86, 338], [33.99, 156.01], [12.04, 138.86], [28.53, 196.36], [23.05, 195.1], [14.6, 157.8], [3.26, 169.58], [-15.62, 177.38], [20, 180]]';
        error['paths'] = c7;
        res.render('plutonavsys', error);
      }
      else {
        var a = JSON.parse(req.cookies.plutoName)
        a.splice(a.indexOf(req.body.newFeature), 1);
        console.log(a)
        res.cookie('plutoName', JSON.stringify(a))
        // req.cookies.moonName = JSON.stringify(a)
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < a.length; i += 1) {
          dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
        }
        var ordD = ""
        var a77 = a.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[86, 338], [56.89, 117.62], [12.34, 150.97], [60.08, 153.32], [8.5, 233.09], [56.58, 192.4], [46.07, 229.88], [0, 90], [7.62, 183.22], [86, 338], [33.99, 156.01], [12.04, 138.86], [28.53, 196.36], [23.05, 195.1], [14.6, 157.8], [3.26, 169.58], [-15.62, 177.38], [20, 180]]';
        error['paths'] = c7;
        res.render('plutonavsys', error);
      }
    }
    else {
      if ('mercuryCoord' in req.cookies) {
        var mc2 = JSON.parse(req.cookies.mercuryName);
        var i = mc2.indexOf(req.body.newFeature);
        // console.log(i)
        // console.log(mc2.length)
        // console.log((JSON.parse(req.cookies.moonCoord).length))
        var c = [parseFloat(JSON.parse(req.cookies.mercuryCoord)[i][0]), parseFloat(JSON.parse(req.cookies.mercuryCoord)[i][1])]
      }
      else {
        var c = mercuryNames[req.body.newFeature]
      }
      var c7;
      if (!('mercuryPath' in req.cookies)) {
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < mercuryPaths.length; i++) {
          for (let x = 0; x < mercuryPaths[i].length; x++) {
            if (mercuryPaths[i][x][0] === c[0] && mercuryPaths[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var mercuryCoords7 = []
        for (let i = 0; i < mercuryPaths.length; i++) {
          if (!(iVal.has(i)))
            mercuryCoords7.push(mercuryPaths[i])
        }
        mercuryPaths = mercuryCoords7
        c7 = JSON.stringify(mercuryPaths);
        res.cookie('mercuryPath', c7)
      }
      else {
        var mp = JSON.parse(req.cookies.mercuryPath)
        console.log(c)
        const iVal = new Set()
        for (let i = 0; i < mp.length; i++) {
          for (let x = 0; x < mp[i].length; x++) {
            if (mp[i][x][0] === c[0] && mp[i][x][1] === c[1]) {
              iVal.add(i)
              break;
            }
          }
        }
        var mercuryCoords7 = []
        for (let i = 0; i < mp.length; i++) {
          if (!(iVal.has(i)))
            mercuryCoords7.push(mp[i])
        }
        mp = mercuryCoords7
        c7 = JSON.stringify(mp)
        res.cookie('mercuryPath', c7)
        console.log(req.cookies.mercuryPath)
      }
      var c2;
      if (!('mercuryCoord' in req.cookies)) {
        mercuryCoords2.splice(mercuryCoords2.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(mercuryCoords2);
        res.cookie('mercuryCoord', c2)
      }
      else {
        var mc = JSON.parse(req.cookies.mercuryCoord)
        mc.splice(mc.findIndex(item => item[0] == c[0] && item[1] == c[1]), 1)
        c2 = JSON.stringify(mc)
        res.cookie('mercuryCoord', c2)
      }
      if (!('mercuryName' in req.cookies)) {
        mercuryNames2.splice(mercuryNames2.indexOf(req.body.newFeature), 1)
        res.cookie('mercuryName', JSON.stringify(mercuryNames2));
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < mercuryNames2.length; i += 1) {
          dataliststrings += "<option value = '" + mercuryNames2[i] + "'>" + mercuryNames2[i] + "</option>"
        }
        var ordD = ""
        var a77 = mercuryNames2.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[19.52, 150.46], [67.3, 327.4], [39, 128.02], [-57.68, 93.2], [31.65, 198.02], [-68.25, 114.78], [-6.95, 146.04], [-23.58, 141.41], [-43.21, 54.26], [49.79, 84.62]]';
        error['paths'] = c7;
        res.render('mercurynavsys', error);
      }
      else {
        var a = JSON.parse(req.cookies.mercuryName)
        a.splice(a.indexOf(req.body.newFeature), 1);
        console.log(a)
        res.cookie('mercuryName', JSON.stringify(a))
        // req.cookies.moonName = JSON.stringify(a)
        var error = {};
        var dataliststrings = ""
        for (let i = 0; i < a.length; i += 1) {
          dataliststrings += "<option value = '" + a[i] + "'>" + a[i] + "</option>"
        }
        var ordD = ""
        var a77 = a.sort()
        for (let i = 0; i < a77.length; i += 1) {
          ordD += "<option value = '" + a77[i] + "'>" + a77[i] + "</option>"
        }
        error['ord'] = ordD;
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        // error['coords'] = '[[19.52, 150.46], [67.3, 327.4], [39, 128.02], [-57.68, 93.2], [31.65, 198.02], [-68.25, 114.78], [-6.95, 146.04], [-23.58, 141.41], [-43.21, 54.26], [49.79, 84.62]]';
        error['paths'] = c7;
        res.render('mercurynavsys', error);
      }
    }
  }

});
router.post('/inputcollect', function(req, res) {
  if (req.body.input1 === req.body.input2) {
    console.log('hello')
    var error = { 'error': 'Please pick two different features' }
    var dataliststrings = ''
    if ('planet' in req.body) {
      console.log(req.body.planet)
      if (req.body.planet === 'Moon') {
        console.log('hello dog')
        if ('moonCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.moonCoord);
          //var c3 = req.cookies.moonCoord.replaceAll(",", ", ");
        }
        else {
          var c = moonCoords
        }
        var c2 = c;
        var moonNames3 = {};
        if (('moonName' in req.cookies))
          moonNames3 = switchToList(req.cookies.moonName);
        else
          moonNames3 = moonNames;
        for (let i in moonNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(moonNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (('moonPath' in req.cookies))
          c7 = JSON.stringify(JSON.parse(req.cookies.moonPath))
        else
          c7 = moonPaths2
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        error['paths'] = c7;
        res.render('moonnavsys', error);
      }
      else if (req.body.planet === 'Mars') {
        console.log("yeah")
        if ('marsCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.marsCoord);
        }
        else {
          var c = marsCoords
        }
        var c2 = c;
        // for (let i in marsNames) {
        //   dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        // }
        console.log("what")
        var marsNames3 = {};
        if (('marsName' in req.cookies))
          marsNames3 = switchToList(req.cookies.marsName);
        else
          marsNames3 = marsNames;
        for (let i in marsNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(marsNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        console.log("is up")
        var c7;
        if (('marsPath' in req.cookies))
          c7 = JSON.stringify(JSON.parse(req.cookies.marsPath))
        else
          c7 = marsPaths2
        console.log("dog")
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        error['paths'] = c7;
        res.render('marsnavsys', error);
      }
      else if (req.body.planet === 'Mercury') {
        if ('mercuryCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.mercuryCoord);
        }
        else {
          var c = mercuryCoords
        }
        var c2 = c;
        var mercuryNames3 = {};
        if (('mercuryName' in req.cookies))
          mercuryNames3 = switchToList(req.cookies.mercuryName);
        else
          mercuryNames3 = mercuryNames;
        for (let i in mercuryNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(mercuryNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        // for (let i in mercuryNames) {
        //   dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        // }
        var c7;
        if (('mercuryPath' in req.cookies))
          c7 = JSON.stringify(JSON.parse(req.cookies.mercuryPath))
        else
          c7 = mercuryPaths2
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        error['paths'] = c7;
        res.render('mercurynavsys', error);
      }
      else {
        if ('plutoCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.plutoCoord);
        }
        else {
          var c = plutoCoords
        }
        var c2 = c;

        // for (let i in plutoNames) {

        //   dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        // }
        var plutoNames3 = {};
        if (('plutoName' in req.cookies))
          plutoNames3 = switchToList(req.cookies.plutoName);
        else
          plutoNames3 = plutoNames;
        for (let i in plutoNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(plutoNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (('plutoPath' in req.cookies))
          c7 = JSON.stringify(JSON.parse(req.cookies.plutoPath))
        else
          c7 = plutoPaths2
        error['data2'] = dataliststrings;
        error['coords'] = c2;
        error['paths'] = c7;
        res.render('plutonavsys', error);
      }
    }
  }
  else {
    const { spawn } = require('child_process');
    var error = { 'error': 'Please pick two different features' }
    var dataliststrings = ''
    if ('planet' in req.body) {
      var planName = '';
      if (req.body.planet === 'Moon') {
        planName = "moon"
        if ('moonCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.moonCoord);
          var c3 = req.cookies.moonCoord.replaceAll(",", ", ");
        }
        else {
          var c = moonCoords2
          var c3 = moonCoords
        }
        var c2 = c;
        var moonNames3 = {};
        if (('moonName' in req.cookies)) {
          moonNames3 = switchToList(req.cookies.moonName);
          console.log(moonNames3)
        }
        else
          moonNames3 = moonNames;
        for (let i in moonNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(moonNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        error['data3'] = moonNames3;
        error['data2'] = dataliststrings;
        error['coords'] = c3;
        error['coords2'] = c2;
        var c7;
        if (('moonPath' in req.cookies))
          c7 = JSON.parse(req.cookies.moonPath)
        else
          c7 = moonPaths
        error['paths'] = c7;
      }
      else if (req.body.planet === 'Mars') {
        planName = 'mars'
        if ('marsCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.marsCoord);
          var c3 = req.cookies.marsCoord.replaceAll(",", ", ");
        }
        else {
          var c = marsCoords2
          var c3 = marsCoords
        }
        var c2 = c;
        var marsNames3 = {};
        if (('marsName' in req.cookies))
          marsNames3 = switchToList(req.cookies.marsName);
        else
          marsNames3 = marsNames;
        for (let i in marsNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(marsNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (('marsPath' in req.cookies))
          c7 = JSON.parse(req.cookies.marsPath)
        else
          c7 = marsPaths
        error['data3'] = marsNames3;
        error['data2'] = dataliststrings;
        error['coords'] = c3;
        error['coords2'] = c2;
        error['paths'] = c7;
      }
      else if (req.body.planet === 'Mercury') {
        planName = 'mercury'
        if ('mercuryCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.mercuryCoord);
          var c3 = req.cookies.mercuryCoord.replaceAll(",", ", ");
        }
        else {
          var c = mercuryCoords2
          var c3 = mercuryCoords
        }
        var c2 = c;
        var mercuryNames3 = {};
        if (('mercuryName' in req.cookies))
          mercuryNames3 = switchToList(req.cookies.mercuryName);
        else
          mercuryNames3 = mercuryNames;
        for (let i in mercuryNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(mercuryNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (('mercuryPath' in req.cookies))
          c7 = JSON.parse(req.cookies.mercuryPath)
        else
          c7 = mercuryPaths
        error['data3'] = mercuryNames3;
        error['data2'] = dataliststrings;
        error['coords'] = c3;
        error['coords2'] = c2;
        error['paths'] = c7;
      }
      else {
        planName = 'pluto'
        if ('plutoCoord' in req.cookies) {
          var c = JSON.parse(req.cookies.plutoCoord);
          var c3 = req.cookies.plutoCoord.replaceAll(",", ", ");
        }
        else {
          var c = plutoCoords2
          var c3 = plutoCoords
        }
        var c2 = c;
        var plutoNames3 = {};
        if (('plutoName' in req.cookies))
          plutoNames3 = switchToList(req.cookies.plutoName);
        else
          plutoNames3 = plutoNames;
        for (let i in plutoNames3) {
          dataliststrings += "<option value = '" + i + "'>" + i + "</option>"
        }
        var sortedDict = Object.fromEntries(
          Object.entries(plutoNames3).sort((a, b) => a[0].localeCompare(b[0]))
        );
        var ordD = ""
        for (let i in sortedDict) {
          ordD += "<option value = '" + i + "'>" + i + "</option>"
        }
        error['ord'] = ordD;
        var c7;
        if (('plutoPath' in req.cookies))
          c7 = JSON.parse(req.cookies.plutoPath)
        else
          c7 = plutoPaths
        error['data3'] = plutoNames3;
        error['data2'] = dataliststrings;
        error['coords'] = c3;
        error['coords2'] = c2;
        error['paths'] = c7;
      }
    }
    var d = ''
    for (let i in error['data3']) {

      d += i + ", "
    }
    console.log('hello')
    console.log(d)
    console.log('hello')
    console.log(error['coords2'])
    console.log('hello')
    console.log(error['paths'])
    const command = spawn('python', ["routes/pythonalg.py", req.body.input1, req.body.input2, d, error['coords2'], error['paths']]);
    let result = '';
    var x;

    command.stdout.on('data', function(data) {
      result += data.toString();
    });
    command.on('close', function(code) {
      error['error'] = ''
      error['finalPath'] = result
      finNames = []
      var r = result.split(',')
      var d2 = d.split(",")
      var r2 = []
      for (let i = 0; i < r.length; i += 2)
        r2.push([parseFloat(r[i]), parseFloat(r[i + 1])])
      for (let i = 0; i < r2.length; i++) {
        mainInd = 0;
        for (let x = 0; x < error['coords2'].length; x++) {
          if (error['coords2'][x][0] === r2[i][0] && error['coords2'][x][1] == r2[i][1]) {
            mainInd = x
            break;
          }
        }
        finNames.push(d2[mainInd])
      }
      error['namePath'] = finNames
      res.render(planName + "navsys", error)
    });
  }
});

module.exports = router;